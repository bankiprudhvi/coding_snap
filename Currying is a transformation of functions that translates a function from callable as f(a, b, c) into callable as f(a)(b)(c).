approach #1

function curry(func){
    return function curried(...args){
        if(args.length>=func.length){
            return func.apply(this,args)
        }else{
          return function(...args2) {
        return curried.apply(this, [...args,...args2]);
      }
        }
    }
}
function sum(a,b){
    return a+b
}
let curriedSum=curry(sum)

console.log(curriedSum(1,2)); output //3
console.log(curriedSum(1)(2));output //3
--------------------------------------------------------

approach #2

function curry(f) {
  return new Proxy(f, {
    apply(target, thisArg, args) {
      return (args.length >= target.length) ?
        Reflect.apply(...arguments) :
        curry(target).bind(thisArg, ...args);
    }
  });
}
function sum(a,b){
    return a+b
}

let curriedresult=curry(sum)
console.log(curriedresult(2,3));//5
console.log(curriedresult(2)(3));//5


#3 approach

function curry(func) {
  return function curried(...args) {
    return args.length >= func.length
      ? func(...args)
      : (...args2) => curried(...args, ...args2);
  };
}



